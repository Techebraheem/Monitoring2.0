apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-app
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hello-app
  template:
    metadata:
      labels:
        app: hello-app
    spec:
      containers:
      - image: caddy
        name: caddy
        ports:
        - containerPort: 80
---
# service
apiVersion: v1
kind: Service
metadata:
  name: hello-svc
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: hello-app
---
# ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    # aws stuff
    # kubernetes.io/ingress.class: alb
    # alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    # alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    # ssl certificate
    cert-manager.io/issuer: prod-issuer
    cert-manager.io/issuer-kind: OriginIssuer
    cert-manager.io/issuer-group: cert-manager.k8s.cloudflare.com
    # external dns
    # external-dns.alpha.kubernetes.io/hostname: tim-cf.devops-playground.com
    external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
  name: tim-cf-ingress
  namespace: default
spec:
  rules:
    - host: tim-cf.devops-playground.com
      http:
        paths:
         - pathType: Prefix
           path: /
           backend:
              service:
                name: hello-svc
                port:
                  number: 80
  tls:
    # specifying a host in the TLS section will tell cert-manager what
    # DNS SANs should be on the created certificate.
    - hosts:
        - tim-cf.devops-playground.com
      # cert-manager will create this secret
      secretName: tim-tls
